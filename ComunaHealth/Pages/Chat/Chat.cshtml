@page
@using ComunaHealth.Modelos
@using Microsoft.EntityFrameworkCore
@model ComunaHealth.Pages.Chat.ChatModel

@inject ComunaDbContext dbContext
@inject UserManager<ModeloUsuario> userManager

<div class="container-fluid h-100">

    <div class="row h-100">
        
        @{
            var idUsuarioActual = int.Parse(userManager.GetUserId(User));
            var usuarioActual = await dbContext.Users.Where(u => u.Id == idUsuarioActual).Include(u => u.Chats).FirstOrDefaultAsync();

        @*Lista de chats del usuario*@
        <div class="col-3 d-flex flex-column text-center border-right">

            <p class="mb-3">
                Chats
            </p>

            @foreach (var chat in usuarioActual.Chats)
            {
                var chatActual = await dbContext.Chats.Where(c => c.Id == chat.Id).Include(c => c.Participantes).Include(c => c.Entradas).FirstOrDefaultAsync();

                var participantesChatActual = chatActual?.Participantes;

                var otroParticipante = participantesChatActual?.FirstOrDefault(u => u.Id != idUsuarioActual);

                if (otroParticipante == null)
                {
                    return;
                }

                <form
                    class="chat"
                    id="chat-@chat.GuidChat"
                    method="post" 
                    style="max-height: 8%;">

                    <input type="hidden" name="idChat" value="@chat.GuidChat"/>

                    <button onclick="ActualizarVentanaChatActual(event, 'chat-@chat.GuidChat');" class="w-95 h-100 container btn btn-light pl-4" style="max-height: 100%; text-overflow: ellipsis; overflow: hidden;">
                        <div class="row">
                            <span class="text-left" style="font-size: small"> @otroParticipante.UserName </span>
                        </div>

                        <div class="row mt-2 text-left">
                            <span style="max-height: 100%; font-size: small;">
                                @chat.Entradas.LastOrDefault()?.Contenido
                            </span>
                        </div>
                    </button>

                </form>
            }


        </div>

        @*Ventana de chat*@
        <div class="col-9 h-100">
            <div >

                @*Mensajes*@
                <div class="d-flex flex-column " id="scrollMensajes" style=" overflow: scroll; overflow-x: hidden; position: absolute; width: 95%; height: 90%; direction:rtl;">
                    
                    <div class="d-flex flex-column justify-content-end" style="direction: ltr;" id="mensajes">
                        <partial name="_MensajesChat" />
                    </div>

                </div>

                @*Form enviar mensaje*@
                <form 
                    method="post"
                    class="w-100 form-inline border-top" 
                    id="formEnviarMensaje" 
                    style="position: absolute; bottom: 0%; height: 10%"
                    data-ajax="true"
                    data-ajax-method="post"
                    data-ajax-url="Chat?handler=EnviarMensaje"
                    data-ajax-complete="MensajeEnviadoHandler">
                    
                    @*Input mensaje*@
                    <textarea type="text" title="Mensaje" name="mensaje" id="inputMensaje" class="align-self-end mx-4" rows="2" style="resize: none; width: 85%;"></textarea>
                    
                    @*Guid del chat actual*@
                    <input type="hidden" id="idChatActual" name="idChatActual"/>
                    
                    @*Boton enviar*@
                    <button disabled="disabled" type="submit" title="Mensaje" class="align-self-end btn btn-primary mb-2" id="botonEnviar" onclick="EnviarMensaje(event, formEnviarMensaje);">
                        <i class="fas fa-paper-plane"></i>
                    </button>

                </form>

            </div>
        </div>
    }
    </div>

</div>

@section Scripts{
    
    <script type="text/javascript" src="~/js/signalr/dist/browser/signalr.min.js"></script>
    <script type="text/javascript" src="~/lib/jquery-ajax-unobtrusive/jquery.unobtrusive-ajax.min.js"></script>
    
    @*Scripts*@
    <script type="text/javascript">

        @*Id del usuario*@
        var idUsuarioActual = @userManager.GetUserId(User);

        @*Guid del chat actual*@
        var guidChatActual;

        @*Conexion con el hub*@
        var conexionSignalR;

        @*Mandamos al usuario al fondo de la pagina*@
        $("html, body").animate({ scrollTop: $(document).height() }, "slow");

        @*Ocultamos el scroll horizontal*@
        $("body").css("overflow-x", "hidden");

        "use strict";

        InicializarSignalR();

        @*Funcion encargada de inicializar la conexion con signalR*@
        function InicializarSignalR()
        {
            @*Nos conectamos con el hub*@
            conexionSignalR = new signalR.HubConnectionBuilder().withUrl("/ChatHub").build();

            @*Abrimos la conexion*@
            conexionSignalR.start().then(
                @*Una vez tengamos la conexion abierta...*@
                function () {

                @*Por cada chat que tenga el usuario...*@
                $('.chat').each(function (indice) {

                    @*Nos conectamos al chat*@
                    conexionSignalR.invoke("ConectarAChat", $(this)[0]["idChat"].value)
                        .catch(err =>
                        {
                            console.log(err);
                        });
                });

                @*Creamos un handler para el evento de RecibirMensaje*@
                conexionSignalR.on("RecibirMensaje",

                    @*Cuando recibamos un mensaje...*@
                    function (guidChat, contenidoMensaje, fechaMensaje, nombreUsuario, idUsuario) {

                        if (guidChat == guidChatActual) {

                            @* Lo añadimos a la lista de mensajes *@
                            AñadirMensaje(contenidoMensaje, fechaMensaje, nombreUsuario, idUsuario == idUsuarioActual);

                            @* Hacemos scroll al fondo de la lista de mensajes *@
                            $('#scrollMensajes').scrollTop($('#scrollMensajes').prop('scrollHeight'));
                        }                     
                    });

                @*Habilitamos el boton de enviar mensaje*@
                $('#botonEnviar').prop('disabled', false);

            });
        }

        @*Funcion llamada cuando el usuario selecciona un chat*@
        function ActualizarVentanaChatActual(e, form) {

            @*Detenemos la propagacion del evento por defecto*@
            e.preventDefault();

            @*Obtenemos la guid del nuevo chat*@
            guidChatActual = $('#' + form)[0]["idChat"].value;
            $('#idChatActual').val(guidChatActual);

            @*Enviamos la solicitud de listar los mensajes del chat al servidor*@
            $.ajax({
                type: "post",
                datatype: "html",
                contenttype: "application/json; charset=utf-8",
                url: "Chat",
                data: $('#' + form).serialize(),
                beforesend: function(xhr) { xhr.setHeader("RequestValidationToken", $("input:hidden[name=__RequestVerificationToken]")) },
                success: function(respuesta) { $('#mensajes').html(respuesta); }
            });
        }

        @*Funcion llamada al presionar el boton de enviar mensaje*@
        function EnviarMensaje(e, form) {

            @*Invocamos el metodo EnviarMensaje del hub*@
            conexionSignalR.invoke("EnviarMensaje", guidChatActual, form["mensaje"].value);
        }

        @*Funcion llamada cuando se envia el mensaje*@
        function MensajeEnviadoHandler()
        {
            @*Borramos el input*@
            $('#inputMensaje').val('');
        }

    </script>
}