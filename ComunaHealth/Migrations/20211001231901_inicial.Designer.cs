// <auto-generated />
using System;
using ComunaHealth.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ComunaHealth.Migrations
{
    [DbContext(typeof(ComunaDbContext))]
    [Migration("20211001231901_inicial")]
    partial class inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaveEncriptado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PuedeSerModificado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ModeloChat");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloCita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Duracion")
                        .HasColumnType("int");

                    b.Property<int>("EspecializacionCita")
                        .HasColumnType("int");

                    b.Property<int>("EstadoCita")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Fecha")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("ModeloCita");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloContenedorDeEntradas<ComunaHealth.Modelos.ModeloEntrada>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("ModeloContenedorDeEntradas<ModeloEntrada>");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloContenedorDeEntradas<ComunaHealth.Modelos.ModeloEntradaHistorialMedico>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("ModeloContenedorDeEntradas<ModeloEntradaHistorialMedico>");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloEntrada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contenido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("FechaDeCreacion")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("ModeloEntrada");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ModeloEntrada");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloRol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EspecializacionRepresentada")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloSolicitudCambioHorarioDeCita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NuevaDuracion")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("NuevaFecha")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Razon")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("ModeloSolicitudCambioHorarioDeCita");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DNI")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoCuenta")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TiposCuenta")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasAlternateKey("DNI");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ModeloUsuario");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIAdministradorLogAdministrador", b =>
                {
                    b.Property<int>("IdLogAdministrador")
                        .HasColumnType("int");

                    b.Property<int>("IdAdministrador")
                        .HasColumnType("int");

                    b.HasKey("IdLogAdministrador", "IdAdministrador");

                    b.HasIndex("IdAdministrador");

                    b.HasIndex("IdLogAdministrador")
                        .IsUnique();

                    b.ToTable("TIAdministradorLogAdministrador");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIChatUsuario", b =>
                {
                    b.Property<int>("IdChat")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.HasKey("IdChat", "IdUsuario");

                    b.HasIndex("IdUsuario");

                    b.ToTable("TIChatUsuario");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TICitaMedico", b =>
                {
                    b.Property<int>("IdCita")
                        .HasColumnType("int");

                    b.Property<int>("IdMedico")
                        .HasColumnType("int");

                    b.HasKey("IdCita", "IdMedico");

                    b.HasIndex("IdCita")
                        .IsUnique();

                    b.HasIndex("IdMedico");

                    b.ToTable("TICitaMedico");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TICitaPaciente", b =>
                {
                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<int>("IdCita")
                        .HasColumnType("int");

                    b.HasKey("IdPaciente", "IdCita");

                    b.HasIndex("IdCita")
                        .IsUnique();

                    b.ToTable("TICitaPaciente");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TICitaSolicitudCambioHorarioCita", b =>
                {
                    b.Property<int>("IdSolicitudCambioHorarioDeCita")
                        .HasColumnType("int");

                    b.Property<int>("IdCita")
                        .HasColumnType("int");

                    b.HasKey("IdSolicitudCambioHorarioDeCita", "IdCita");

                    b.HasIndex("IdCita")
                        .IsUnique();

                    b.HasIndex("IdSolicitudCambioHorarioDeCita")
                        .IsUnique();

                    b.ToTable("TICitaSolicitudCambioHorarioCita");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIContenedorDeEntradasEntrada<ComunaHealth.Modelos.ModeloEntrada>", b =>
                {
                    b.Property<int>("IdContenedorDeEntradas")
                        .HasColumnType("int");

                    b.Property<int>("IdEntrada")
                        .HasColumnType("int");

                    b.HasKey("IdContenedorDeEntradas", "IdEntrada");

                    b.HasIndex("IdEntrada");

                    b.ToTable("TIContenedorDeEntradasEntrada<ModeloEntrada>");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIContenedorDeEntradasEntrada<ComunaHealth.Modelos.ModeloEntradaHistorialMedico>", b =>
                {
                    b.Property<int>("IdContenedorDeEntradas")
                        .HasColumnType("int");

                    b.Property<int>("IdEntrada")
                        .HasColumnType("int");

                    b.HasKey("IdContenedorDeEntradas", "IdEntrada");

                    b.HasIndex("IdEntrada");

                    b.ToTable("TIContenedorDeEntradasEntrada<ModeloEntradaHistorialMedico>");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIMedicoContenedorEntrada", b =>
                {
                    b.Property<int>("IdMedico")
                        .HasColumnType("int");

                    b.Property<int>("IdEntrada")
                        .HasColumnType("int");

                    b.HasKey("IdMedico", "IdEntrada");

                    b.HasIndex("IdEntrada");

                    b.ToTable("TIMedicoContenedorEntrada");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIMedicoContenedorEntradaHistorialMedico", b =>
                {
                    b.Property<int>("IdMedico")
                        .HasColumnType("int");

                    b.Property<int>("IdEntradaHistorialMedico")
                        .HasColumnType("int");

                    b.HasKey("IdMedico", "IdEntradaHistorialMedico");

                    b.HasIndex("IdEntradaHistorialMedico");

                    b.ToTable("TIMedicoContenedorEntradaHistorialMedico");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIMedicoEntradaHistorialMedico", b =>
                {
                    b.Property<int>("IdEntradaHistorialMedico")
                        .HasColumnType("int");

                    b.Property<int>("IdMedico")
                        .HasColumnType("int");

                    b.HasKey("IdEntradaHistorialMedico", "IdMedico");

                    b.HasIndex("IdEntradaHistorialMedico")
                        .IsUnique();

                    b.HasIndex("IdMedico");

                    b.ToTable("TIMedicoEntradaHistorialMedico");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIPacienteContenedorEntrada", b =>
                {
                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<int>("IdContenedorEntrada")
                        .HasColumnType("int");

                    b.HasKey("IdPaciente", "IdContenedorEntrada");

                    b.HasIndex("IdContenedorEntrada");

                    b.ToTable("TIPacienteContenedorEntrada");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIPacienteContenedorEntradaCambiosEstiloVida", b =>
                {
                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<int>("IdContenedorEntrada")
                        .HasColumnType("int");

                    b.HasKey("IdPaciente", "IdContenedorEntrada");

                    b.HasIndex("IdContenedorEntrada");

                    b.ToTable("TIPacienteContenedorEntradaCambiosEstiloVida");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIPacienteContenedorEntradaHistorialMedico", b =>
                {
                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<int>("IdEntradaHistorialMedico")
                        .HasColumnType("int");

                    b.HasKey("IdPaciente", "IdEntradaHistorialMedico");

                    b.HasIndex("IdEntradaHistorialMedico");

                    b.ToTable("TIPacienteContenedorEntradaHistorialMedico");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIPacienteEntradaHistorialMedico", b =>
                {
                    b.Property<int>("IdEntradaHistorialMedico")
                        .HasColumnType("int");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.HasKey("IdEntradaHistorialMedico", "IdPaciente");

                    b.HasIndex("IdEntradaHistorialMedico")
                        .IsUnique();

                    b.HasIndex("IdPaciente");

                    b.ToTable("TIPacienteEntradaHistorialMedico");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIUsuarioNoAdministradorMensajeChat", b =>
                {
                    b.Property<int>("IdMensajeChat")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuarioNoAdministrador")
                        .HasColumnType("int");

                    b.HasKey("IdMensajeChat", "IdUsuarioNoAdministrador");

                    b.HasIndex("IdMensajeChat")
                        .IsUnique();

                    b.HasIndex("IdUsuarioNoAdministrador");

                    b.ToTable("TIUsuarioNoAdministradorMensajeChat");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIUsuarioNoAdministradorSolicitudCambioHorarioCita", b =>
                {
                    b.Property<int>("IdSolicitudPostergacionCita")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuarioNoAdministrador")
                        .HasColumnType("int");

                    b.HasKey("IdSolicitudPostergacionCita", "IdUsuarioNoAdministrador");

                    b.HasIndex("IdSolicitudPostergacionCita")
                        .IsUnique();

                    b.HasIndex("IdUsuarioNoAdministrador");

                    b.ToTable("TIUsuarioNoAdministradorSolicitudCambioHorarioCita");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ModeloMedicoModeloPaciente", b =>
                {
                    b.Property<int>("MedicosId")
                        .HasColumnType("int");

                    b.Property<int>("PacientesId")
                        .HasColumnType("int");

                    b.HasKey("MedicosId", "PacientesId");

                    b.HasIndex("PacientesId");

                    b.ToTable("ModeloMedicoModeloPaciente");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloEntradaHistorialMedico", b =>
                {
                    b.HasBaseType("ComunaHealth.Modelos.ModeloEntrada");

                    b.Property<int>("Especializacion")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ModeloEntradaHistorialMedico");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloLogAdministrador", b =>
                {
                    b.HasBaseType("ComunaHealth.Modelos.ModeloEntrada");

                    b.HasDiscriminator().HasValue("ModeloLogAdministrador");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloMensajeChat", b =>
                {
                    b.HasBaseType("ComunaHealth.Modelos.ModeloEntrada");

                    b.HasDiscriminator().HasValue("ModeloMensajeChat");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloAdministrador", b =>
                {
                    b.HasBaseType("ComunaHealth.Modelos.ModeloUsuario");

                    b.HasDiscriminator().HasValue("ModeloAdministrador");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloUsuarioNoAdministrador", b =>
                {
                    b.HasBaseType("ComunaHealth.Modelos.ModeloUsuario");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("FotoAnversoDNI")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<byte[]>("FotoDePerfil")
                        .HasColumnType("image");

                    b.Property<byte[]>("FotoReversoDNI")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<bool>("MailEsPublico")
                        .HasColumnType("bit");

                    b.Property<int>("Municipio")
                        .HasColumnType("int");

                    b.Property<bool?>("TelefonoEsPublico")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("ModeloUsuarioNoAdministrador");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.Identity.Usuarios.ModeloAdministradorJefe", b =>
                {
                    b.HasBaseType("ComunaHealth.Modelos.ModeloAdministrador");

                    b.HasDiscriminator().HasValue("ModeloAdministradorJefe");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloMedico", b =>
                {
                    b.HasBaseType("ComunaHealth.Modelos.ModeloUsuarioNoAdministrador");

                    b.Property<int>("Matricula")
                        .HasColumnType("int");

                    b.Property<string>("StringEspecializaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Especializaciones");

                    b.HasDiscriminator().HasValue("ModeloMedico");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloPaciente", b =>
                {
                    b.HasBaseType("ComunaHealth.Modelos.ModeloUsuarioNoAdministrador");

                    b.HasDiscriminator().HasValue("ModeloPaciente");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIAdministradorLogAdministrador", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloAdministrador", "Administrador")
                        .WithMany()
                        .HasForeignKey("IdAdministrador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComunaHealth.Modelos.ModeloLogAdministrador", "LogAdministrador")
                        .WithOne("Administrador")
                        .HasForeignKey("ComunaHealth.Relaciones.TIAdministradorLogAdministrador", "IdLogAdministrador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administrador");

                    b.Navigation("LogAdministrador");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIChatUsuario", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloChat", "Chat")
                        .WithMany("Participantes")
                        .HasForeignKey("IdChat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComunaHealth.Modelos.ModeloUsuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TICitaMedico", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloCita", "Cita")
                        .WithOne("Medico")
                        .HasForeignKey("ComunaHealth.Relaciones.TICitaMedico", "IdCita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComunaHealth.Modelos.ModeloMedico", "Medico")
                        .WithMany("Citas")
                        .HasForeignKey("IdMedico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TICitaPaciente", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloCita", "Cita")
                        .WithOne("Paciente")
                        .HasForeignKey("ComunaHealth.Relaciones.TICitaPaciente", "IdCita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComunaHealth.Modelos.ModeloPaciente", "Paciente")
                        .WithMany("Citas")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TICitaSolicitudCambioHorarioCita", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloCita", "Cita")
                        .WithOne("SolicitudCambioHorario")
                        .HasForeignKey("ComunaHealth.Relaciones.TICitaSolicitudCambioHorarioCita", "IdCita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComunaHealth.Modelos.ModeloSolicitudCambioHorarioDeCita", "SolicitudCambioHorarioDeCita")
                        .WithOne("Cita")
                        .HasForeignKey("ComunaHealth.Relaciones.TICitaSolicitudCambioHorarioCita", "IdSolicitudCambioHorarioDeCita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");

                    b.Navigation("SolicitudCambioHorarioDeCita");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIContenedorDeEntradasEntrada<ComunaHealth.Modelos.ModeloEntrada>", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloContenedorDeEntradas<ComunaHealth.Modelos.ModeloEntrada>", "ContenedorDeEntradas")
                        .WithMany("Entradas")
                        .HasForeignKey("IdContenedorDeEntradas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComunaHealth.Modelos.ModeloEntrada", "Entrada")
                        .WithMany()
                        .HasForeignKey("IdEntrada")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContenedorDeEntradas");

                    b.Navigation("Entrada");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIContenedorDeEntradasEntrada<ComunaHealth.Modelos.ModeloEntradaHistorialMedico>", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloContenedorDeEntradas<ComunaHealth.Modelos.ModeloEntradaHistorialMedico>", "ContenedorDeEntradas")
                        .WithMany("Entradas")
                        .HasForeignKey("IdContenedorDeEntradas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComunaHealth.Modelos.ModeloEntradaHistorialMedico", "Entrada")
                        .WithMany()
                        .HasForeignKey("IdEntrada")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContenedorDeEntradas");

                    b.Navigation("Entrada");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIMedicoContenedorEntrada", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloContenedorDeEntradas<ComunaHealth.Modelos.ModeloEntrada>", "Entrada")
                        .WithMany()
                        .HasForeignKey("IdEntrada")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComunaHealth.Modelos.ModeloMedico", "Medico")
                        .WithMany("Notas")
                        .HasForeignKey("IdMedico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entrada");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIMedicoContenedorEntradaHistorialMedico", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloContenedorDeEntradas<ComunaHealth.Modelos.ModeloEntradaHistorialMedico>", "EntradaHistorialMedico")
                        .WithMany()
                        .HasForeignKey("IdEntradaHistorialMedico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComunaHealth.Modelos.ModeloMedico", "Medico")
                        .WithMany("NotasPacientes")
                        .HasForeignKey("IdMedico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntradaHistorialMedico");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIMedicoEntradaHistorialMedico", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloEntradaHistorialMedico", "EntradaHistorialMedico")
                        .WithOne("MedicoCreador")
                        .HasForeignKey("ComunaHealth.Relaciones.TIMedicoEntradaHistorialMedico", "IdEntradaHistorialMedico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComunaHealth.Modelos.ModeloMedico", "Medico")
                        .WithMany()
                        .HasForeignKey("IdMedico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntradaHistorialMedico");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIPacienteContenedorEntrada", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloContenedorDeEntradas<ComunaHealth.Modelos.ModeloEntrada>", "ContenedorEntrada")
                        .WithMany()
                        .HasForeignKey("IdContenedorEntrada")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComunaHealth.Modelos.ModeloPaciente", "Paciente")
                        .WithMany("Diario")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContenedorEntrada");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIPacienteContenedorEntradaCambiosEstiloVida", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloContenedorDeEntradas<ComunaHealth.Modelos.ModeloEntrada>", "ContenedorEntrada")
                        .WithMany()
                        .HasForeignKey("IdContenedorEntrada")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComunaHealth.Modelos.ModeloPaciente", "Paciente")
                        .WithMany("CambiosEstiloDeVida")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContenedorEntrada");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIPacienteContenedorEntradaHistorialMedico", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloContenedorDeEntradas<ComunaHealth.Modelos.ModeloEntradaHistorialMedico>", "EntradaHistorialMedico")
                        .WithMany()
                        .HasForeignKey("IdEntradaHistorialMedico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComunaHealth.Modelos.ModeloPaciente", "Paciente")
                        .WithMany("HistorialMedico")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntradaHistorialMedico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIPacienteEntradaHistorialMedico", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloEntradaHistorialMedico", "EntradaHistorialMedico")
                        .WithOne("Paciente")
                        .HasForeignKey("ComunaHealth.Relaciones.TIPacienteEntradaHistorialMedico", "IdEntradaHistorialMedico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComunaHealth.Modelos.ModeloPaciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntradaHistorialMedico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIUsuarioNoAdministradorMensajeChat", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloMensajeChat", "MensajeChat")
                        .WithOne("Remitente")
                        .HasForeignKey("ComunaHealth.Relaciones.TIUsuarioNoAdministradorMensajeChat", "IdMensajeChat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComunaHealth.Modelos.ModeloUsuarioNoAdministrador", "UsuarioNoAdministrador")
                        .WithMany()
                        .HasForeignKey("IdUsuarioNoAdministrador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MensajeChat");

                    b.Navigation("UsuarioNoAdministrador");
                });

            modelBuilder.Entity("ComunaHealth.Relaciones.TIUsuarioNoAdministradorSolicitudCambioHorarioCita", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloSolicitudCambioHorarioDeCita", "SolicitudPostergacionCita")
                        .WithOne("Solicitante")
                        .HasForeignKey("ComunaHealth.Relaciones.TIUsuarioNoAdministradorSolicitudCambioHorarioCita", "IdSolicitudPostergacionCita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComunaHealth.Modelos.ModeloUsuarioNoAdministrador", "UsuarioNoAdministrador")
                        .WithMany()
                        .HasForeignKey("IdUsuarioNoAdministrador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SolicitudPostergacionCita");

                    b.Navigation("UsuarioNoAdministrador");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloRol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloUsuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloUsuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloRol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComunaHealth.Modelos.ModeloUsuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloUsuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModeloMedicoModeloPaciente", b =>
                {
                    b.HasOne("ComunaHealth.Modelos.ModeloMedico", null)
                        .WithMany()
                        .HasForeignKey("MedicosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComunaHealth.Modelos.ModeloPaciente", null)
                        .WithMany()
                        .HasForeignKey("PacientesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloChat", b =>
                {
                    b.Navigation("Participantes");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloCita", b =>
                {
                    b.Navigation("Medico")
                        .IsRequired();

                    b.Navigation("Paciente")
                        .IsRequired();

                    b.Navigation("SolicitudCambioHorario");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloContenedorDeEntradas<ComunaHealth.Modelos.ModeloEntrada>", b =>
                {
                    b.Navigation("Entradas");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloContenedorDeEntradas<ComunaHealth.Modelos.ModeloEntradaHistorialMedico>", b =>
                {
                    b.Navigation("Entradas");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloSolicitudCambioHorarioDeCita", b =>
                {
                    b.Navigation("Cita")
                        .IsRequired();

                    b.Navigation("Solicitante")
                        .IsRequired();
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloEntradaHistorialMedico", b =>
                {
                    b.Navigation("MedicoCreador");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloLogAdministrador", b =>
                {
                    b.Navigation("Administrador");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloMensajeChat", b =>
                {
                    b.Navigation("Remitente");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloMedico", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Notas");

                    b.Navigation("NotasPacientes");
                });

            modelBuilder.Entity("ComunaHealth.Modelos.ModeloPaciente", b =>
                {
                    b.Navigation("CambiosEstiloDeVida");

                    b.Navigation("Citas");

                    b.Navigation("Diario");

                    b.Navigation("HistorialMedico");
                });
#pragma warning restore 612, 618
        }
    }
}
